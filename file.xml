<s font_size="40">Робота над мовою була розпочата Грейдоном Гоаром в 2006 році, в 2009[3] до розробки підключилася Mozilla, і в 2010 році мова була офіційно представлена на Mozilla Summit 2010[4]. Також в 2010 році розробка мови була переведена з попередньої версії компілятора, яка була написана мовою OCaml, на компілятор, який написаний безпосередньо на Rust, з використанням LLVM як бекенду[5]. У 2011 році новий компілятор успішно скомпілював сам себе[6].

Перший стабільний випуск мови Rust 1.0 відбувся 15 травня 2015[7] після п'яти років розробки, він ознаменував повну стабілізацію програмних інтерфейсів усіх бібліотек і мовних конструкцій. В процесі підготовки гілки Rust 1.0 програмних інтерфейсів і можливості мови піддалися значній ревізії, після якої за умовчанням залишені тільки повністю готові до застосування можливості, реалізація яких не змінюватиметься надалі. Усі інші функції переведені в розряд експериментальних і винесені з постачання за умовчанням.

Паралельно Mozilla Research розвиває експериментальний браузерний рушій Servo, написаний мовою Rust з підтримкою багатониткового рендерингу веб-сторінок і розпаралелюванням операцій з DOM (Document Object Model), а компанія Samsung займається його портуванням на Android та ARM процесори[8].

Огляд
За структурою мова Rust нагадує C++, але істотно відрізняється в деяких деталях реалізації синтаксису і семантики, а також орієнтацією на блокову організацію структури коду, яка дозволяє реалізувати завдання у вигляді легковагих співпрограм. Автоматичне управління пам'яттю позбавляє розробника необхідності маніпулювання вказівниками і захищає від проблем, що виникають через низькорівневу роботу з пам'яттю, таких як звернення до області пам'яті після її звільнення, розіменовування нульових вказівників, вихід за межі буфера тощо. Rust підтримує суміш імперативних процедурних і об'єктно-орієнтованих методів з такими парадигмами, як функційне програмування і модель акторів, а також узагальнене програмування і метапрограмування, в статичних і динамічних стилях.

Особливості
Базові можливості мови:

Орієнтація на безпеку
Акуратна робота з пам'яттю — ніяких нульових і втрачених вказівників. Автоматичне управління пам'яттю;
Контроль мінливості. Об'єкти незмінні (Immutable) за умовчанням;
Безпека динамічного виконання: обробка збоїв, винятки, ведення логу, RAII/dtors;
Typestate: можливість визначення складних інваріантів, що контролюють структури даних.
Орієнтація на паралельність і ефективність коду
Явний контроль пам'яті, контролювання схеми розподілу пам'яті;
Вкрай легкі завдання, що формуються у вигляді співпрограми. Легкість в породження тисяч і мільйонів підпроцесів;
Ітератори стека (фактично лямбда-блоки без розподілу купи);
Статична, нативна компіляція із створенням виконуваних файлів ELF, PE, Mach-o;
Прямий і простий інтерфейс для коду на мові Сі;
Орієнтація на практичне застосування
Мультипарадигмальний, функціональний, імперативно-процедурний, об'єктно-орієнтована, підтримка паралельної actor-моделі;
Функції вищого порядку із зв'язуванням (біндінгами);
Немає номінальних типів або ієрархії типів;
Мульти-платформовий, підтримується Windows, Linux, Mac OS X, *BSD;
Зберігання рядків у UTF8, різноманітність низькорівневих типів;
Працює з існуючими нативними наборами інструментів: GDB, Valgrind, Shark тощо;
Практична можливість порушення правил: можливість ігнорування правил безпеки, якщо чітко вказано, коли і як їх порушувати.

</s>